- variables:
    => non type : pas de typage au declaration + flexibilite au changement
    var x; // a eviter (Global scope)
    let x; // souvent utilise (Bloc Scope)
    const X; // constant (nom variable au majuscule)
    types: number, string, boolean, object et function


- les testes (meme que C et java)
- les boucles : for, while, do while
    for(let i=1;i<=10;i++)
        console.log(i)

- functions:
          syntax:  function name(params){
                        // corps de la function
                    }

    - toutes les fonctions retournent undefined sauf si return explicite realise
    - absence de surcharge
    - support des valeurs par defauts
    - chaque fonction a acces une variable nommee 'arguments' qui est un tableau des
    differents params envoyes
    - support de '...param' => rest parameter

- callback : faire passer une fonction comme param a une autre fonction
 => delegation et personalisation

            function randomNumber(){
                return Math.floor(Math.random()*10)
            }
            function devinette(nbr, successFn, echecFn){
                let aleatoire = randomNumber()
                if(aleatoire == nbr)
                    successFn()
                else echecFn()
            }

            devinette(4, function(){alert("success")},function(){console.error("echec")})
            devinette(4, function(){console.log("bravo tu as gagne")},function(){alert("sorry!!")})
Nb: fonction anonyme (sans nom) => function(){} 
    exemple d utilisation: callback et creation de fonction (   let x = function(){ }     )